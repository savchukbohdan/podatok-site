document.addEventListener("DOMContentLoaded", () => {
  // –¢–µ–º–Ω–∞/—Å–≤—ñ—Ç–ª–∞ —Ç–µ–º–∞
  const toggleBtn = document.getElementById("btnToggle");
  toggleBtn.addEventListener("click", () => {
    document.body.classList.toggle("dark-mode");
    const isDark = document.body.classList.contains("dark-mode");
    toggleBtn.textContent = isDark ? "‚òÄÔ∏è" : "üåô";
  });

  // –í–∞–ª—é—Ç–Ω–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
  async function convertToCurrency(amountUAH, currencyCode) {
    try {
      const res = await fetch(`https://api.exchangerate.host/latest?base=UAH&symbols=${currencyCode}`);
      const data = await res.json();
      const rate = data.rates[currencyCode];
      return (amountUAH * rate).toFixed(2);
    } catch {
      return null;
    }
  }

  // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞—Ä–ø–ª–∞—Ç–∏
  let salaryChart = null;
  window.calcSalary = async function () {
    const gross = parseFloat(document.getElementById("gross").value);
    if (isNaN(gross) || gross <= 0) {
      document.getElementById("salaryResult").innerHTML = "–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω—É —Å—É–º—É";
      return;
    }

    const pdf = gross * 0.18;
    const vz = gross * 0.05;
    const net = gross - pdf - vz;
    const esv = gross * 0.22;

    const currency = document.getElementById("currency").value;
    const netConverted = await convertToCurrency(net, currency);

    document.getElementById("salaryResult").innerHTML = `
      <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b><br>
      –ü–î–§–û: ${pdf.toFixed(2)} –≥—Ä–Ω<br>
      –í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä: ${vz.toFixed(2)} –≥—Ä–Ω<br>
      –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞ —Ä—É–∫–∏: ${net.toFixed(2)} –≥—Ä–Ω (${netConverted ?? "‚Äî"} ${currency})<br>
      –í–∏—Ç—Ä–∞—Ç–∏ —Ä–æ–±–æ—Ç–æ–¥–∞–≤—Ü—è (–Ñ–°–í): ${esv.toFixed(2)} –≥—Ä–Ω
    `;

    const ctx = document.getElementById("salaryChart").getContext("2d");
    if (salaryChart) salaryChart.destroy();
    salaryChart = new Chart(ctx, {
      type: "pie",
      data: {
        labels: ["–ü–î–§–û", "–í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä", "–ß–∏—Å—Ç–∞ –∑–∞—Ä–ø–ª–∞—Ç–∞", "–Ñ–°–í"],
        datasets: [{
          data: [pdf, vz, net, esv],
          backgroundColor: ['#f44336', '#2196f3', '#4caf50', '#ffeb3b']
        }]
      },
      options: {
        plugins: {
          legend: { labels: { color: "#eeeeee" } }
        }
      }
    });
  };

  // –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –§–û–ü
  let fopChart = null;
  window.calcFOP = async function () {
    const group = document.getElementById("group").value;
    const income = parseFloat(document.getElementById("income").value) || 0;
    const vat = document.getElementById("vat").checked;

    let edp = 0, vz = 0;
    const esv = 1760;

    if (group === "1") {
      edp = 302.80;
      vz = 800;
    } else if (group === "2") {
      edp = 1600;
      vz = 800;
    } else if (group === "3") {
      edp = vat ? income * 0.03 : income * 0.05;
      vz = income * 0.01;
    }

    const total = edp + vz + esv;
    const currency = document.getElementById("currencyFOP").value;
    const totalConverted = await convertToCurrency(total, currency);

    document.getElementById("fopResult").innerHTML = `
      <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b><br>
      –Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫: ${edp.toFixed(2)} –≥—Ä–Ω<br>
      –í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä: ${vz.toFixed(2)} –≥—Ä–Ω<br>
      –Ñ–°–í: ${esv.toFixed(2)} –≥—Ä–Ω<br>
      <b>–í—Å—å–æ–≥–æ –ø–æ–¥–∞—Ç–∫—ñ–≤ –Ω–∞ –º—ñ—Å—è—Ü—å:</b> ${total.toFixed(2)} –≥—Ä–Ω (${totalConverted ?? "‚Äî"} ${currency})
    `;

    const ctx = document.getElementById("fopChart").getContext("2d");
    if (fopChart) fopChart.destroy();
    fopChart = new Chart(ctx, {
      type: "pie",
      data: {
        labels: ["–Ñ–¥–∏–Ω–∏–π –ø–æ–¥–∞—Ç–æ–∫", "–í—ñ–π—Å—å–∫–æ–≤–∏–π –∑–±—ñ—Ä", "–Ñ–°–í"],
        datasets: [{
          data: [edp, vz, esv],
          backgroundColor: ['#9c27b0', '#ff9800', '#ffeb3b']
        }]
      },
      options: {
        plugins: {
          legend: { labels: { color: "#eeeeee" } }
        }
      }
    });
  };

  // üìÖ –ü–æ–¥–∞—Ç–∫–æ–≤–∏–π –∫–∞–ª–µ–Ω–¥–∞—Ä
  const taxDates = {
    "1": {
      "–°—ñ—á–µ–Ω—å": ["20 - –Ñ–ü", "20 - –Ñ–°–í"],
      "–ö–≤—ñ—Ç–µ–Ω—å": ["20 - –Ñ–°–í"],
      "–õ–∏–ø–µ–Ω—å": ["20 - –Ñ–°–í"],
      "–ñ–æ–≤—Ç–µ–Ω—å": ["20 - –Ñ–°–í"]
    },
    "2": {
      "–°—ñ—á–µ–Ω—å": ["20 - –Ñ–ü", "20 - –Ñ–°–í"],
      "–ö–≤—ñ—Ç–µ–Ω—å": ["20 - –Ñ–ü", "20 - –Ñ–°–í"],
      "–õ–∏–ø–µ–Ω—å": ["20 - –Ñ–ü", "20 - –Ñ–°–í"],
      "–ñ–æ–≤—Ç–µ–Ω—å": ["20 - –Ñ–ü", "20 - –Ñ–°–í"]
    },
    "3": {
      "–°—ñ—á–µ–Ω—å": ["20 - –Ñ–°–í", "20 - –Ñ–ü (–∫–≤.)"],
      "–ö–≤—ñ—Ç–µ–Ω—å": ["20 - –Ñ–°–í", "20 - –Ñ–ü (–∫–≤.)"],
      "–¢—Ä–∞–≤–µ–Ω—å": ["10 - –î–µ–∫–ª–∞—Ä–∞—Ü—ñ—è"],
      "–õ–∏–ø–µ–Ω—å": ["20 - –Ñ–°–í", "20 - –Ñ–ü (–∫–≤.)"],
      "–ñ–æ–≤—Ç–µ–Ω—å": ["20 - –Ñ–°–í", "20 - –Ñ–ü (–∫–≤.)"]
    }
  };

  const months = [
    "–°—ñ—á–µ–Ω—å", "–õ—é—Ç–∏–π", "–ë–µ—Ä–µ–∑–µ–Ω—å", "–ö–≤—ñ—Ç–µ–Ω—å", "–¢—Ä–∞–≤–µ–Ω—å", "–ß–µ—Ä–≤–µ–Ω—å",
    "–õ–∏–ø–µ–Ω—å", "–°–µ—Ä–ø–µ–Ω—å", "–í–µ—Ä–µ—Å–µ–Ω—å", "–ñ–æ–≤—Ç–µ–Ω—å", "–õ–∏—Å—Ç–æ–ø–∞–¥", "–ì—Ä—É–¥–µ–Ω—å"
  ];

  function renderTaxCalendar(group) {
    const calendar = document.getElementById("taxCalendarGrid");
    if (!calendar) return;

    calendar.innerHTML = "";
    const now = new Date();
    const today = now.getDate();
    const currentMonth = months[now.getMonth()];

    months.forEach(month => {
      const monthEl = document.createElement("div");
      monthEl.className = "calendar-month";
      monthEl.innerHTML = `<h4>${month}</h4>`;

      const dates = taxDates[group]?.[month] || [];
      if (dates.length === 0) {
        monthEl.innerHTML += `<div class="tax-date">‚Äî</div>`;
      } else {
        dates.forEach(date => {
          const [dayStr, label] = date.split(" - ");
          const day = parseInt(dayStr.trim());

          const isToday = (month === currentMonth && day === today);
          const dateEl = document.createElement("div");
          dateEl.className = "tax-date" + (isToday ? " today" : "");
          dateEl.innerHTML = `${day} ‚Äî ${label} <span class="remind" title="–ù–∞–≥–∞–¥–∞—Ç–∏">üîî</span>`;

          dateEl.querySelector(".remind").onclick = () => {
            const key = `remind-${group}-${month}-${day}`;
            localStorage.setItem(key, "true");
            alert(`–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è ${month} ${day}`);
          };

          monthEl.appendChild(dateEl);
        });
      }

      calendar.appendChild(monthEl);
    });
  }

  const groupSelect = document.getElementById("fopGroupFilter");
  if (groupSelect) {
    groupSelect.addEventListener("change", e => {
      renderTaxCalendar(e.target.value);
    });

    // –ø–µ—Ä–≤–∏–Ω–Ω–∏–π —Ä
